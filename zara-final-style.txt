1. Reflect on all the code you wrote this quarter (you wrote quite a lot, you should be proud!). Identify a module/function of which you are particularly proud of. Be specific, include line numbers and filename. Tell us about what makes that piece of code special. 
I'm most proud of my code for the malloc extension implementing valgrind and redzone detection. I really enjoyed the process of getting to explore memory allocation further on my mango pi. I'm most proud of my free function, since it was able to neatly tie in every aspect of the extension and required me to fully understand all of the previous code. Initially, I had naively hardcoded the number of bytes offset needed for different parts (e.g. header, redzone, block, etc) and switching to a sizeof implementation not only made my code much more readable, but also helped debugging when weird bugs would crop up (especially with redzone detection). I also wanted to minimise my space allocation when making each payload address divisible by 8, and enjoyed playing around with different ways of optimising. Ultimately, in the process of increasing my header size to store more information, I was able to minimise the amount of space required for a given payload whilst also keeping it at an 8-divisible address. In line 204-209, I have a loop that allows block to coalesce effectively given the size in the header and the known redzone areas. Playing around with different type conversions and keeping track of exactly which addresses I was manipulating proved challenging but very rewarding.

2. Similarly to the previous question. Tell us about a module/function you would most like to go back and rewrite if you had the time to do so. Again include line numbers and file. Tell us what you would change and why. What are some of the advantages/payoffs that could result from reworking the code? Explain your reasoning. 
I would go back to my printf implemenation. It had been a long week at that point and so I was mostly writing code that would work rather than writing good code. There are some messy if statements with duplicated code that I would now make a helper function for or just clean up in some way. Specifically in vsnprintf, I would significantly reduce the amount of code within that function and use more helper functions to clean it up and make it clearer.

Write a letter to the future 107e students. Give them the style advice you think is most valuable to hear on the start of their 107e journey. We are looking for Â½ to 1 page long letter here. We appreciate your thoughful responses and will collate the most inspiring and and helpful wisdom to share with the future classes -- Thank you!
107e was an extremely rewarding class. However, it is time consuming! This is obvious, but you do get out what you put in. Like many quarters (at least for me), motivation can dip week 4-6 as classes become tough and assignments are long. During these weeks, I found myself mostly focusing on just 'getting it done' rather than actually appreciating what I was learning and the code I was writing. This lead to sometimes messy code or code that would 'function' and that I wasn't necessarily super proud of. The biggest piece of advice I can give for this, is start assignment early, and do them slowly. A little bit here and there really helps to appreciate and enjoy the assignments rather than being stressed about meeting the deadlines. CS107e gave me a really strong boost in my coding abilities and confidence and I'm excited to pursue more classes in systems. Not only do you get to build something truly amazing, but at the end you're able to come out of the class feeling proud of what you've learnt and accomplished over only 10 weeks. There probably hasn't been a class at Stanford I've taken that has been so project based whilst also maintaining a good learning rate. Every bug I encountered led me to learning something new and gaining a new understanding of C or baremetal programming. 

I didn't find CS107e hugely challenging conceptually (OK maybe Assembly was a bit weird). An explanation from Julie or the TAs quickly was often sufficient to understand the underlying logic. The most challenging aspect came in translating what we learnt in class to actual code. C isn't very forgiving so you have to learn to be very explicit about what you want. In this way, I found CS107e was hugely beneficial in me being able to turn my ideas into code. The final project at the end is the cherry on top to be able to implement something of your choosing. I loved the freedom we were given when picking ideas and it lead me to learning how to 3D print, CAD design, and how annoying hardware can be! Ultimately however, I thoroughly enjoyed the class and would recommend it to anyone. It is an extremely friendly environment and the support is incredible.
